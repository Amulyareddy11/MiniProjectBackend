package com.example.service;

import static org.junit.jupiter.api.Assertions.assertEquals;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import com.example.model.Account;
import com.example.repo.AccountRepo;

import org.mockito.InjectMocks;
import org.mockito.Mock;


@ExtendWith(MockitoExtension.class)
public class AccountServiceTest {
	
	@Mock
	private AccountRepo ar;
	
	@InjectMocks
	private AccountService as;
	
	private Account acc1;
	private Account acc2;
	
	@BeforeEach
	void setUp()
	{
		acc1=new Account();
		acc1.setId((long)1);
		acc1.setAccountHolderName("Account A");
		acc1.setBalance(20000);
		
		acc2=new Account();
		acc2.setId((long)2);
		acc2.setAccountHolderName("Account B");
		acc2.setBalance(40000);
		
	}
	
	@Test
	void testRead() {
		List<Account> Customers=Arrays.asList(acc1,acc2);
		when(ar.findAll()).thenReturn(Customers);
		
		List<Account> result=as.getAccount();
		assertEquals(2,result.size());
		assertEquals("Customer A",result.get(0).getAccountHolderName());
		assertEquals("Customer B",result.get(1).getAccountHolderName());
		
	}
	
	@Test
	void testReadOne() {
		when(ar.findById((long) 1)).thenReturn(Optional.of(acc1));
		Optional<Account> result=as.getAccount((long)1);
		assertTrue(result.isPresent());
		assertEquals("Customer A", result.get().getAccountHolderName());
	}
	
	@Test
	void testAdd()
	{
		as.add(acc1);
		verify(ar).save(acc1);
	}
	
	@Test
	void testUpdate() {
		Account updatedAccount=new Account();
		updatedAccount.setAccountHolderName("Updated account holder name");
		updatedAccount.setBalance(9000.00);
		
		when(ar.findById((long) 1)).thenReturn(Optional.of(acc1));
		as.update(1,updatedAccount);
		assertEquals("Updated Customer A",acc1.getAccountHolderName());
		assertEquals("Updated Username A",acc1.getBalance());
		verify(ar).save(acc1);
	}
	
	@Test
	void testDelete() {
		cs.delete(1);
		verify(ar).deleteById(1);
	}
}
